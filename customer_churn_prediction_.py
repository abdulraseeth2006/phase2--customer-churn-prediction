# -*- coding: utf-8 -*-
"""customer churn prediction .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1D4HK9kVtytGizLfH4IoWwqHqULZxGMZb
"""

!pip install gradio # Install the gradio library

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
import gradio as gr # Now this import should work

# Load Dataset4199c.csv
df = pd.read_csv('/content/telecom_churn.csv')

# Display dataset information
def display_info():
    print('Dataset Information:')
    print(df.info())
    print('\nData Preview:')
    print(df.head())

display_info()

# Data Preprocessing
X = df.drop(df.columns[-1], axis=1)  # Assuming last column is the target
y = df[df.columns[-1]]

# Handling Categorical Data
X = pd.get_dummies(X, drop_first=True)

# Train-Test Split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Feature Scaling
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Model Training
model = LinearRegression()
model.fit(X_train, y_train)
!pip install gradio # Install the gradio library

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
import gradio as gr # Now this import should work

# Load Dataset4199c.csv
df = pd.read_csv('/content/telecom_churn.csv')

# Display dataset information
def display_info():
    print('Dataset Information:')
    print(df.info())
    print('\nData Preview:')
    print(df.head())

display_info()

# Data Preprocessing
X = df.drop(df.columns[-1], axis=1)  # Assuming last column is the target
y = df[df.columns[-1]]

# Handling Categorical Data
X = pd.get_dummies(X, drop_first=True)

# Train-Test Split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Feature Scaling
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Model Training
model = LinearRegression()
model.fit(X_train, y_train)

# Predictions
y_pred = model.predict(X_test)